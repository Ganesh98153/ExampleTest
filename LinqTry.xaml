<Activity mc:Ignorable="sap sap2010" x:Class="LinqTry" VisualBasic.Settings="{x:Null}" sap:VirtualizedContainerService.HintSize="673.3333333333334,2106" sap2010:WorkflowViewState.IdRef="LinqTry_1" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data.Common" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="31">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>UiPath.Excel.Activities</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="55">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>System.ComponentModel.EventBasedAsync</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>Microsoft.Win32.Primitives</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.Private.Xml</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.Data.SqlClient</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>UiPath.Python</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.Linq.Parallel</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Linq.Queryable</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic.Forms</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic.Core</AssemblyReference>
      <AssemblyReference>Microsoft.Office.Interop.Excel</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="LinqTry" sap:VirtualizedContainerService.HintSize="540.6666666666666,2041.3333333333333" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="sd:DataTable" Name="dtIbank" />
      <Variable x:TypeArguments="sd:DataTable" Name="dtMakuri" />
      <Variable x:TypeArguments="sd:DataTable" Name="dtResult" />
      <Variable x:TypeArguments="sd:DataTable" Name="dtIbankUnmatched" />
      <Variable x:TypeArguments="sd:DataTable" Name="dtMakuriUnmatched" />
      <Variable x:TypeArguments="sd:DataTable" Name="dtIbakMakuriMatched" />
      <Variable x:TypeArguments="sd:DataTable" Name="dtMakuriFilterData" />
      <Variable x:TypeArguments="sd:DataTable" Name="dtMM" />
      <Variable x:TypeArguments="sd:DataTable" Name="dtFilteredMM" />
      <Variable x:TypeArguments="sd:DataTable" Name="dtMakuriMMUnmactched" />
      <Variable x:TypeArguments="sd:DataTable" Name="MakuriMMM" />
      <Variable x:TypeArguments="sd:DataTable" Name="dtMMMakuriUnmatched" />
      <Variable x:TypeArguments="scg:List(sd:DataTable)" Name="ListTables" />
      <Variable x:TypeArguments="scg:List(x:String)" Name="ListSheetsNames" />
      <Variable x:TypeArguments="x:String" Name="TodayExcelPath" />
      <Variable x:TypeArguments="x:String" Name="YesterdaysExcelPath" />
      <Variable x:TypeArguments="sd:DataTable" Name="dtMMEod" />
      <Variable x:TypeArguments="sd:DataTable" Name="dtIbankEod" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <Sequence DisplayName="KeySequence" sap:VirtualizedContainerService.HintSize="498.6666666666667,1954" sap2010:WorkflowViewState.IdRef="Sequence_7">
      <Sequence.Variables>
        <Variable x:TypeArguments="sd:DataTable" Name="dtDD" />
      </Sequence.Variables>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <ui:MultipleAssign DisplayName="Multiple Assign" sap:VirtualizedContainerService.HintSize="436.6666666666667,131.33333333333334" sap2010:WorkflowViewState.IdRef="MultipleAssign_1">
        <ui:MultipleAssign.AssignOperations>
          <scg:List x:TypeArguments="ui:AssignOperation" Capacity="4">
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_1">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="x:String">[TodayExcelPath]</OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="x:String">[DateTime.Now.ToString("dd-MMM-yyyy")]</InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_2">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="x:String">[YesterdaysExcelPath]</OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="x:String">[DateTime.Now.AddDays(-1).ToString("dd-MMM-yyyy")]</InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
          </scg:List>
        </ui:MultipleAssign.AssignOperations>
      </ui:MultipleAssign>
      <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="436.6666666666667,96" sap2010:WorkflowViewState.IdRef="LogMessage_2" Level="Info" Message="[TodayExcelPath]" />
      <ui:ReadRange Range="{x:Null}" AddHeaders="True" DataTable="[dtIbank]" DisplayName="Read Range Ibank" sap:VirtualizedContainerService.HintSize="436.6666666666667,88" sap2010:WorkflowViewState.IdRef="ReadRange_1" SheetName="Sheet1" WorkbookPath="[&quot;D:\UiPath\Test File\Data\IBank\&quot; + YesterdaysExcelPath +&quot;-IBank.xlsx&quot;]" />
      <ui:ReadRange Range="{x:Null}" AddHeaders="False" DataTable="[dtMakuri]" DisplayName="Read Range Makuri" sap:VirtualizedContainerService.HintSize="436.6666666666667,88" sap2010:WorkflowViewState.IdRef="ReadRange_2" SheetName="Sheet1" WorkbookPath="[&quot;D:\UiPath\Test File\Data\Makuri\&quot; + YesterdaysExcelPath +&quot;-Makuri.xlsx&quot;]" />
      <ui:ReadRange Range="{x:Null}" AddHeaders="False" DataTable="[dtMM]" DisplayName="Read Range MM" sap:VirtualizedContainerService.HintSize="436.6666666666667,88" sap2010:WorkflowViewState.IdRef="ReadRange_4" SheetName="Export" WorkbookPath="[&quot;D:\UiPath\Test File\Data\MobileMoney\&quot; + YesterdaysExcelPath +&quot;-MM.xlsx&quot;]" />
      <ui:ReadRange Range="{x:Null}" AddHeaders="True" DataTable="[dtIbankEod]" DisplayName="Read Range Ibank Eod" sap:VirtualizedContainerService.HintSize="436.6666666666667,88" sap2010:WorkflowViewState.IdRef="ReadRange_8" SheetName="Ibank EOD" WorkbookPath="[&quot;D:\UiPath\Test File\Data\&quot; + YesterdaysExcelPath +&quot;.xlsx&quot;]" />
      <ui:ReadRange Range="{x:Null}" AddHeaders="True" DataTable="[dtMMEod]" DisplayName="Read Range MM Eod" sap:VirtualizedContainerService.HintSize="436.6666666666667,88" sap2010:WorkflowViewState.IdRef="ReadRange_9" SheetName="MM_Eod" WorkbookPath="[&quot;D:\UiPath\Test File\Data\&quot; + YesterdaysExcelPath +&quot;.xlsx&quot;]" />
      <ui:ReadRange Range="{x:Null}" AddHeaders="True" DataTable="[dtDD]" DisplayName="Read Range Workbook" sap:VirtualizedContainerService.HintSize="436.6666666666667,88" sap2010:WorkflowViewState.IdRef="ReadRange_10" SheetName="Sheet1" WorkbookPath="[&quot;D:\UiPath\Test File\Data\MobileMoney\&quot;+YesterdaysExcelPath+&quot;-DD.xlsx&quot;]" />
      <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="436.6666666666667,54" sap2010:WorkflowViewState.IdRef="CommentOut_7">
        <ui:CommentOut.Body>
          <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="400,141.33333333333334" sap2010:WorkflowViewState.IdRef="Sequence_13">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:InvokeCode ContinueOnError="{x:Null}" Code="Console.WriteLine(&quot;Code started running&quot;);&#xA;//To remove null row from cbs data&#xA;Console.WriteLine(&quot;To remove null row from cbs data&quot;);&#xA;&#xA;out_dtResult = in_dtMakuri.AsEnumerable()&#xA;.Where(x =&gt; x.Field&lt;string&gt;(9) != &quot;&quot;).CopyToDataTable();&#xA;&#xA;DataRow firstRow = out_dtResult.Rows[0];&#xA;&#xA;for (int i = 0; i &lt; firstRow.ItemArray.Length; i++)&#xA;{&#xA;    string columnName = firstRow[i].ToString();&#xA;    out_dtResult.Columns[i].ColumnName = columnName;&#xA;}&#xA;&#xA;out_dtResult.Rows.Remove(firstRow);&#xA;&#xA;&#xA;//To select only those rows which consist Cr&#xA;Console.WriteLine(&quot;To select only those rows which consist Cr&quot;);&#xA;out_dtResult = out_dtResult.AsEnumerable()&#xA;.Where(x =&gt; x.Field&lt;string&gt;(&quot;D / C&quot;) == &quot;C&quot;).CopyToDataTable();&#xA;&#xA;//To make Uniq in Makuri&#xA;Console.WriteLine(&quot;To make Uniq in Makuri&quot;);&#xA;&#xA;out_dtResult.Columns.Add(&quot;Uniq&quot;, typeof(string));&#xA;&#xA;foreach (DataRow row in out_dtResult.Rows)&#xA;{&#xA;    row[&quot;Uniq&quot;] = (row[&quot;Ref No&quot;].ToString().Substring(row[&quot;Ref No&quot;].ToString().Length - 6)).PadLeft(6, '0').ToString();&#xA;}&#xA;&#xA;//To make Uniq in Ibank&#xA;Console.WriteLine(&quot;To make Uniq in Ibank&quot;);&#xA;in_dtIbank.Columns.Add(&quot;Uniq&quot;, typeof(string));&#xA;&#xA;foreach (DataRow row in in_dtIbank.Rows)&#xA;{&#xA;    row[&quot;Uniq&quot;] = (row[&quot;STAN ID&quot;].ToString()).PadLeft(6, '0').ToString();&#xA;}&#xA;&#xA;//To find Makuri Ibank Unmatched on Makuri side&#xA;Console.WriteLine(&quot;To find Makuri Ibank Unmatched on Makuri side&quot;);&#xA;&#xA;var rowsToDelete = from row1 in out_dtResult.AsEnumerable()&#xA;                   join row2 in in_dtIbank.AsEnumerable()&#xA;                   on row1.Field&lt;string&gt;(&quot;Uniq&quot;) equals row2.Field&lt;string&gt;(&quot;Uniq&quot;)&#xA;                   select row1;&#xA;&#xA;DataTable dtFiltered = out_dtResult.Clone();&#xA;&#xA;foreach (DataRow row in rowsToDelete)&#xA;{&#xA;    dtFiltered.ImportRow(row);&#xA;}&#xA;out_dtMakuriIbankMatched = dtFiltered;&#xA;&#xA;var rowsToKeep = out_dtResult.AsEnumerable().Except(rowsToDelete);&#xA;dtFiltered = out_dtResult.Clone();&#xA;&#xA;foreach (DataRow row in rowsToKeep)&#xA;{&#xA;    dtFiltered.ImportRow(row);&#xA;}&#xA;out_dtMakuriUnmatched = dtFiltered;&#xA;//Eliminating Ibb from makuri ibank unmatched &#xA;Console.WriteLine(&quot;Eliminating Ibb from makuri ibank unmatched &quot;);&#xA;&#xA;out_dtMakuriUnmatched = out_dtMakuriUnmatched.AsEnumerable()&#xA;.Where(x =&gt; x.Field&lt;string&gt;(&quot;Source&quot;) != &quot;IBB&quot;).CopyToDataTable();&#xA;&#xA;//To find Ibank Makuri Unmatched on Ibank side&#xA;Console.WriteLine(&quot;To find Ibank Makuri Unmatched on Ibank side&quot;);&#xA;&#xA;rowsToDelete = from row1 in in_dtIbank.AsEnumerable()&#xA;               join row2 in out_dtResult.AsEnumerable()&#xA;               on row1.Field&lt;string&gt;(&quot;Uniq&quot;) equals row2.Field&lt;string&gt;(&quot;Uniq&quot;)&#xA;               select row1;&#xA;&#xA;rowsToKeep = in_dtIbank.AsEnumerable().Except(rowsToDelete);&#xA;&#xA;dtFiltered = in_dtIbank.Clone();&#xA;foreach (DataRow row in rowsToKeep)&#xA;{&#xA;    dtFiltered.ImportRow(row);&#xA;}&#xA;out_dtIbankUnmatched = dtFiltered;&#xA;&#xA;//Preparing Makuri Ibank Unmatched data for MM adding Uniq2 in datatable&#xA;Console.WriteLine(&quot;Preparing Makuri Ibank Unmatched data for MM adding Uniq2 in datatable&quot;);&#xA;&#xA;out_dtMakuriUnmatched.Columns.Add(&quot;Uniq2&quot;, typeof(string));&#xA;&#xA;foreach (DataRow row in out_dtMakuriUnmatched.Rows)&#xA;{&#xA;    row[&quot;Uniq2&quot;] = (row[&quot;Ref No&quot;].ToString().Substring(row[&quot;Ref No&quot;].ToString().Length - 8)).PadLeft(8, '0').ToString();&#xA;}&#xA;&#xA;//Removing Null row from MM data &#xA;Console.WriteLine(&quot;Removing Null row from MM data &quot;);&#xA;out_dtMM = in_dtMM.AsEnumerable()&#xA;.Where(x =&gt; x.Field&lt;string&gt;(19) != &quot;&quot;).CopyToDataTable();&#xA;&#xA;DataRow firstRowforMM = out_dtMM.Rows[0];&#xA;&#xA;for (int i = 0; i &lt; firstRowforMM.ItemArray.Length; i++)&#xA;{&#xA;    string columnName = firstRowforMM[i].ToString();&#xA;    out_dtMM.Columns[i].ColumnName = columnName;&#xA;}&#xA;&#xA;out_dtMM.Rows.Remove(firstRowforMM);&#xA;&#xA;//Finding Cbs MM unmatched&#xA;Console.WriteLine(&quot;Finding Cbs MM unmatched&quot;);&#xA;&#xA;rowsToDelete = from row1 in out_dtMakuriUnmatched.AsEnumerable()&#xA;                   join row2 in out_dtMM.AsEnumerable()&#xA;                   on row1.Field&lt;string&gt;(&quot;Uniq2&quot;) equals row2.Field&lt;string&gt;(&quot;cbs_trace_id&quot;)&#xA;                   select row1;&#xA;&#xA;dtFiltered = out_dtMakuriUnmatched.Clone();&#xA;&#xA;foreach (DataRow row in rowsToDelete)&#xA;{&#xA;    dtFiltered.ImportRow(row);&#xA;}&#xA;out_dtMakuriMMM = dtFiltered;&#xA;&#xA;rowsToKeep = out_dtMakuriUnmatched.AsEnumerable().Except(rowsToDelete);&#xA;dtFiltered = out_dtMakuriUnmatched.Clone();&#xA;&#xA;foreach (DataRow row in rowsToKeep)&#xA;{&#xA;    dtFiltered.ImportRow(row);&#xA;}&#xA;out_dtMakuriMMUnmatched = dtFiltered;&#xA;&#xA;//Finding MM Cbs unmatched&#xA;Console.WriteLine(&quot;Finding MM Cbs unmatched&quot;);&#xA;&#xA;rowsToDelete = from row1 in out_dtMM.AsEnumerable()&#xA;               join row2 in out_dtMakuriUnmatched.AsEnumerable()&#xA;               on row1.Field&lt;string&gt;(&quot;cbs_trace_id&quot;) equals row2.Field&lt;string&gt;(&quot;Uniq2&quot;)&#xA;               select row1;&#xA;&#xA;dtFiltered = out_dtMM.Clone();&#xA;&#xA;foreach (DataRow row in rowsToDelete)&#xA;{&#xA;    dtFiltered.ImportRow(row);&#xA;}&#xA;&#xA;rowsToKeep = out_dtMM.AsEnumerable().Except(rowsToDelete);&#xA;dtFiltered = out_dtMM.Clone();&#xA;&#xA;foreach (DataRow row in rowsToKeep)&#xA;{&#xA;    dtFiltered.ImportRow(row);&#xA;}&#xA;out_dtMMMakuriUnmatched = dtFiltered;&#xA;Console.WriteLine(&quot;Code successfully executed&quot;);&#xA;&#xA;&#xA;//Adding all output datatables in a List of Datatables&#xA;tableToWrite = new List&lt;DataTable&gt;();&#xA;//tableToWrite.AddRange(new DataTable {out_dtResult,out_dtIbankUnmatched,out_dtMakuriUnmatched,out_dtMakuriIbankMatched,out_dtMM,out_dtMakuriMMUnmatched,out_dtMMMakuriUnmatched,out_dtMakuriMMM});&#xA;tableToWrite.Add(out_dtResult);&#xA;tableToWrite.Add(out_dtIbankUnmatched);&#xA;tableToWrite.Add(out_dtMakuriUnmatched);&#xA;tableToWrite.Add(out_dtMakuriIbankMatched);&#xA;tableToWrite.Add(out_dtMM);&#xA;tableToWrite.Add(out_dtMakuriMMUnmatched);&#xA;tableToWrite.Add(out_dtMMMakuriUnmatched);&#xA;tableToWrite.Add(out_dtMakuriMMM);&#xA;&#xA;sheetNames = new List&lt;string&gt;();&#xA;//Don't Change Ibank EOD and mm EOd sheet name&#xA;string[] stringsToAdd = { &quot;cbs&quot;, &quot;Ibank EOD&quot;, &quot;Unmatched Cbs Data from IBank&quot;, &quot;Ibank and Cbs Match&quot;, &quot;MM Data&quot;, &quot;Dish and Data&quot;, &quot;MM and cbs Unmatched&quot;, &quot;MM and Cbs Matched&quot;, &quot;MM_Eod&quot;, &quot;MM_Failed&quot; };&#xA;sheetNames.AddRange(stringsToAdd);&#xA;/*&#xA;&#xA;string filePath = @&quot;D:\UiPath\Test File\MainFile.xlsx&quot;;&#xA;&#xA;// Create a new Excel application.&#xA;Microsoft.Office.Interop.Excel.Application excel = new Microsoft.Office.Interop.Excel.Application();&#xA;&#xA;// Create a new Workbook.&#xA;Microsoft.Office.Interop.Excel.Workbook workbook = excel.Workbooks.Add();&#xA;&#xA;// Loop through the DataTables.&#xA;&#xA;int sheetNumber = 0;&#xA;foreach (DataTable dt in tableToWrite)&#xA;{&#xA;    // Add a new sheet for the current DataTable.&#xA;    Microsoft.Office.Interop.Excel.Worksheet sheet = (Microsoft.Office.Interop.Excel.Worksheet)workbook.Sheets.Add();&#xA;&#xA;    // Give the sheet a name.&#xA;    sheet.Name = sheetNames[sheetNumber];&#xA;&#xA;    // Loop through the columns of the DataTable.&#xA;&#x9;Console.WriteLine(&quot;Total Columns  in : &quot; + sheet.Name + &quot;is&quot; + dt.Columns.Count.ToString() + &quot;\n Total Rows  is: &quot; + dt.Rows.Count.ToString() );&#xA;&#xA;    for (int col = 0; col &lt; dt.Columns.Count; col++)&#xA;    {&#xA;        // Set the value of the cell to the name of the column.&#xA;        sheet.Cells[1, col + 1] = dt.Columns[col].ColumnName;&#xA;    }&#xA;&#xA;    // Loop through the rows of the DataTable.&#xA;    for (int row = 0; row &lt; dt.Rows.Count; row++)&#xA;    {&#xA;        // Loop through the columns of the DataTable.&#xA;        for (int col = 0; col &lt; dt.Columns.Count; col++)&#xA;        {&#xA;            // Set the value of the cell to the value of the DataTable cell.&#xA;            sheet.Cells[row + 2, col + 1] = dt.Rows[row][col];&#xA;        }&#xA;    }&#xA;&#xA;    // Increment the sheet number.&#xA;    sheetNumber++;&#xA;}&#xA;&#xA;// Save the Workbook to the file.&#xA;workbook.SaveAs(filePath);&#xA;&#xA;// Close the Workbook and the Excel application.&#xA;workbook.Close();&#xA;excel.Quit();&#xA;*/" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="358,54" sap2010:WorkflowViewState.IdRef="InvokeCode_3" Language="CSharp">
              <ui:InvokeCode.Arguments>
                <InArgument x:TypeArguments="sd:DataTable" x:Key="in_dtIbank">[dtIbank]</InArgument>
                <InArgument x:TypeArguments="sd:DataTable" x:Key="in_dtMakuri">[dtMakuri]</InArgument>
                <OutArgument x:TypeArguments="sd:DataTable" x:Key="out_dtResult">[dtResult]</OutArgument>
                <OutArgument x:TypeArguments="sd:DataTable" x:Key="out_dtIbankUnmatched">[dtIbankUnmatched]</OutArgument>
                <OutArgument x:TypeArguments="sd:DataTable" x:Key="out_dtMakuriUnmatched">[dtMakuriUnmatched]</OutArgument>
                <OutArgument x:TypeArguments="sd:DataTable" x:Key="out_dtMakuriIbankMatched">[dtIbakMakuriMatched]</OutArgument>
                <InArgument x:TypeArguments="sd:DataTable" x:Key="in_dtMM">[dtMM]</InArgument>
                <OutArgument x:TypeArguments="sd:DataTable" x:Key="out_dtMM">[dtFilteredMM]</OutArgument>
                <OutArgument x:TypeArguments="sd:DataTable" x:Key="out_dtMakuriMMUnmatched">[dtMakuriMMUnmactched]</OutArgument>
                <OutArgument x:TypeArguments="sd:DataTable" x:Key="out_dtMMMakuriUnmatched">[dtMMMakuriUnmatched]</OutArgument>
                <OutArgument x:TypeArguments="sd:DataTable" x:Key="out_dtMakuriMMM">[MakuriMMM]</OutArgument>
                <OutArgument x:TypeArguments="scg:List(sd:DataTable)" x:Key="tableToWrite">[ListTables]</OutArgument>
                <OutArgument x:TypeArguments="scg:List(x:String)" x:Key="sheetNames">[ListSheetsNames]</OutArgument>
              </ui:InvokeCode.Arguments>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:InvokeCode>
          </Sequence>
        </ui:CommentOut.Body>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:CommentOut>
      <ui:InvokeCode ContinueOnError="{x:Null}" Code="&#xD;&#xA;    Console.WriteLine(&quot;Code started running&quot;);&#xD;&#xA;    //To remove null row from cbs data&#xD;&#xA;    Console.WriteLine(&quot;To remove null row from cbs data&quot;);&#xD;&#xA;&#xD;&#xA;    DataTable out_dtResult = in_dtMakuri.AsEnumerable()&#xD;&#xA;    .Where(x =&gt; x.Field&lt;string&gt;(9) != &quot;&quot;).CopyToDataTable();&#xD;&#xA;&#xD;&#xA;    DataRow firstRow = out_dtResult.Rows[0];&#xD;&#xA;&#xD;&#xA;    for (int i = 0; i &lt; firstRow.ItemArray.Length; i++)&#xD;&#xA;    {&#xD;&#xA;        string columnName = firstRow[i].ToString();&#xD;&#xA;        out_dtResult.Columns[i].ColumnName = columnName;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    out_dtResult.Rows.Remove(firstRow);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    //To select only those rows which consist Cr&#xD;&#xA;    Console.WriteLine(&quot;To select only those rows which consist Cr&quot;);&#xD;&#xA;    out_dtResult = out_dtResult.AsEnumerable()&#xD;&#xA;    .Where(x =&gt; x.Field&lt;string&gt;(&quot;D / C&quot;) == &quot;C&quot;).CopyToDataTable();&#xD;&#xA;&#xD;&#xA;    //To make Uniq in Makuri&#xD;&#xA;    Console.WriteLine(&quot;To make Uniq in Makuri&quot;);&#xD;&#xA;&#xD;&#xA;    out_dtResult.Columns.Add(&quot;Uniq&quot;, typeof(string));&#xD;&#xA;&#xD;&#xA;    foreach (DataRow row in out_dtResult.Rows)&#xD;&#xA;    {&#xD;&#xA;        row[&quot;Uniq&quot;] = (row[&quot;Ref No&quot;].ToString().Substring(row[&quot;Ref No&quot;].ToString().Length - 6)).PadLeft(6, '0').ToString();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    //To make Uniq in Ibank dtIbankEod and dtMMEod&#xD;&#xA;    Console.WriteLine(&quot;To make Uniq in Ibank&quot;);&#xD;&#xA;    in_dtIbank.Columns.Add(&quot;Uniq&quot;, typeof(string));&#xD;&#xA;&#xD;&#xA;    Console.WriteLine(&quot;Merging Ibank Eod with Ibank data&quot;);&#xD;&#xA;&#xD;&#xA;    var rowA = in_dtIbank.AsEnumerable().ToList();&#xD;&#xA;    var rowB = in_dtIBankEOD.AsEnumerable().ToList();&#xD;&#xA;    in_dtIbank = rowA.Concat(rowB).CopyToDataTable();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    foreach (DataRow row in in_dtIbank.Rows)&#xD;&#xA;    {&#xD;&#xA;        row[&quot;Uniq&quot;] = (row[&quot;STAN ID&quot;].ToString()).PadLeft(6, '0').ToString();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    //To find Makuri Ibank Unmatched on Makuri side&#xD;&#xA;    Console.WriteLine(&quot;To find Makuri Ibank Unmatched on Makuri side&quot;);&#xD;&#xA;&#xD;&#xA;    var rowsToDelete = from row1 in out_dtResult.AsEnumerable()&#xD;&#xA;                       join row2 in in_dtIbank.AsEnumerable()&#xD;&#xA;                       on row1.Field&lt;string&gt;(&quot;Uniq&quot;) equals row2.Field&lt;string&gt;(&quot;Uniq&quot;)&#xD;&#xA;                       select row1;&#xD;&#xA;&#xD;&#xA;    DataTable dtFiltered = out_dtResult.Clone();&#xD;&#xA;&#xD;&#xA;    foreach (DataRow row in rowsToDelete)&#xD;&#xA;    {&#xD;&#xA;        dtFiltered.ImportRow(row);&#xD;&#xA;    }&#xD;&#xA;    DataTable out_dtMakuriIbankMatched = dtFiltered;&#xD;&#xA;&#xD;&#xA;    var rowsToKeep = out_dtResult.AsEnumerable().Except(rowsToDelete);&#xD;&#xA;    dtFiltered = out_dtResult.Clone();&#xD;&#xA;&#xD;&#xA;    foreach (DataRow row in rowsToKeep)&#xD;&#xA;    {&#xD;&#xA;        dtFiltered.ImportRow(row);&#xD;&#xA;    }&#xD;&#xA;    DataTable out_dtMakuriUnmatched = dtFiltered;&#xD;&#xA;    //Eliminating Ibb from makuri ibank unmatched &#xD;&#xA;    Console.WriteLine(&quot;Eliminating Ibb from makuri ibank unmatched &quot;);&#xD;&#xA;&#xD;&#xA;    out_dtMakuriUnmatched = out_dtMakuriUnmatched.AsEnumerable()&#xD;&#xA;    .Where(x =&gt; x.Field&lt;string&gt;(&quot;Source&quot;) != &quot;IBB&quot;).CopyToDataTable();&#xD;&#xA;&#xD;&#xA;    //To find Ibank Makuri Unmatched on Ibank side&#xD;&#xA;    Console.WriteLine(&quot;To find Ibank Makuri Unmatched on Ibank side&quot;);&#xD;&#xA;&#xD;&#xA;    rowsToDelete = from row1 in in_dtIbank.AsEnumerable()&#xD;&#xA;                   join row2 in out_dtResult.AsEnumerable()&#xD;&#xA;                   on row1.Field&lt;string&gt;(&quot;Uniq&quot;) equals row2.Field&lt;string&gt;(&quot;Uniq&quot;)&#xD;&#xA;                   select row1;&#xD;&#xA;&#xD;&#xA;    rowsToKeep = in_dtIbank.AsEnumerable().Except(rowsToDelete);&#xD;&#xA;&#xD;&#xA;    dtFiltered = in_dtIbank.Clone();&#xD;&#xA;    foreach (DataRow row in rowsToKeep)&#xD;&#xA;    {&#xD;&#xA;        dtFiltered.ImportRow(row);&#xD;&#xA;    }&#xD;&#xA;    DataTable out_dtIbankUnmatched = dtFiltered;&#xD;&#xA;&#xD;&#xA;    //Preparing Makuri Ibank Unmatched data for MM adding Uniq2 in datatable&#xD;&#xA;    Console.WriteLine(&quot;Preparing Makuri Ibank Unmatched data for MM adding Uniq2 in datatable&quot;);&#xD;&#xA;&#xD;&#xA;    out_dtMakuriUnmatched.Columns.Add(&quot;Uniq2&quot;, typeof(string));&#xD;&#xA;&#xD;&#xA;    foreach (DataRow row in out_dtMakuriUnmatched.Rows)&#xD;&#xA;    {&#xD;&#xA;        row[&quot;Uniq2&quot;] = (row[&quot;Ref No&quot;].ToString().Substring(row[&quot;Ref No&quot;].ToString().Length - 8)).PadLeft(8, '0').ToString();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    //Removing Null row from MM data &#xD;&#xA;    Console.WriteLine(&quot;Removing Null row from MM data &quot;);&#xD;&#xA;    DataTable out_dtMM = in_dtMM.AsEnumerable()&#xD;&#xA;    .Where(x =&gt; x.Field&lt;string&gt;(9) != &quot;&quot;).CopyToDataTable();&#xD;&#xA;&#xD;&#xA;    DataRow firstRowforMM = out_dtMM.Rows[0];&#xD;&#xA;&#xD;&#xA;    for (int i = 0; i &lt; firstRowforMM.ItemArray.Length; i++)&#xD;&#xA;    {&#xD;&#xA;        string columnName = firstRowforMM[i].ToString();&#xD;&#xA;        out_dtMM.Columns[i].ColumnName = columnName;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    out_dtMM.Rows.Remove(firstRowforMM);&#xD;&#xA;&#xD;&#xA;    Console.WriteLine(&quot;Merging MM Eod with MM data&quot;);&#xD;&#xA;    var rowC = out_dtMM.AsEnumerable().ToList();&#xD;&#xA;    var rowD = in_dtMMEOD.AsEnumerable().ToList();&#xD;&#xA;    out_dtMM = rowC.Concat(rowD).CopyToDataTable();&#xD;&#xA;&#xD;&#xA;    //Finding Cbs MM unmatched&#xD;&#xA;    Console.WriteLine(&quot;Finding Cbs MM unmatched&quot;);&#xD;&#xA;&#xD;&#xA;    rowsToDelete = from row1 in out_dtMakuriUnmatched.AsEnumerable()&#xD;&#xA;                   join row2 in out_dtMM.AsEnumerable()&#xD;&#xA;                   on row1.Field&lt;string&gt;(&quot;Uniq2&quot;) equals row2.Field&lt;string&gt;(&quot;cbs_trace_id&quot;)&#xD;&#xA;                   select row1;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    dtFiltered = out_dtMakuriUnmatched.Clone();&#xD;&#xA;&#xD;&#xA;    foreach (DataRow row in rowsToDelete)&#xD;&#xA;    {&#xD;&#xA;        dtFiltered.ImportRow(row);&#xD;&#xA;    }&#xD;&#xA;    DataTable out_dtMakuriMMM = dtFiltered;&#xD;&#xA;&#xD;&#xA;    rowsToKeep = out_dtMakuriUnmatched.AsEnumerable().Except(rowsToDelete);&#xD;&#xA;    dtFiltered = out_dtMakuriUnmatched.Clone();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    foreach (DataRow row in rowsToKeep)&#xD;&#xA;    {&#xD;&#xA;        dtFiltered.ImportRow(row);&#xD;&#xA;    }&#xD;&#xA;    DataTable out_dtMakuriMMUnmatched = dtFiltered;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;//Finding DishHome Unmatched&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;Console.WriteLine(&quot;Finding Dishhome and Data  to CBS unmatched&quot;);&#xD;&#xA;&#xD;&#xA;    rowsToDelete = from row1 in in_dtDD.AsEnumerable()&#xD;&#xA;                   join row2 in out_dtMakuriMMUnmatched.AsEnumerable()&#xD;&#xA;                   on row1.Field&lt;string&gt;(&quot;cbs_trace_id&quot;) equals row2.Field&lt;string&gt;(&quot;Uniq2&quot;)&#xD;&#xA;                   select row1;&#xD;&#xA;&#xD;&#xA;    dtFiltered = in_dtDD.Clone();&#xD;&#xA;&#xD;&#xA;    foreach (DataRow row in rowsToDelete)&#xD;&#xA;    {&#xD;&#xA;        dtFiltered.ImportRow(row);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    rowsToKeep = in_dtDD.AsEnumerable().Except(rowsToDelete);&#xD;&#xA;    dtFiltered = in_dtDD.Clone();&#xD;&#xA;&#xD;&#xA;    foreach (DataRow row in rowsToKeep)&#xD;&#xA;    {&#xD;&#xA;        dtFiltered.ImportRow(row);&#xD;&#xA;    }&#xD;&#xA;    DataTable out_dtDDUnmatched = dtFiltered;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;Console.WriteLine(out_dtDDUnmatched.Rows.Count.ToString());&#xD;&#xA;&#x9;&#xD;&#xA;DataTable out_DDUnmatchedSucess = out_dtDDUnmatched.Clone();&#xD;&#xA;DataTable out_DDUnmatchedFailure = out_dtDDUnmatched.Clone();&#xD;&#xA;&#x9;&#xD;&#xA;Console.WriteLine(&quot;To select only those rows which contain DIsh home and Data pack Success&quot;);&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;&#x9;out_DDUnmatchedSucess = out_dtDDUnmatched.AsEnumerable()&#xD;&#xA;    .Where(x =&gt; x.Field&lt;string&gt;(&quot;STATUS&quot;) == &quot;Success&quot;).DefaultIfEmpty().CopyToDataTable();&#xD;&#xA;&#x9;&#xD;&#xA;&#xD;&#xA;&#x9;Console.WriteLine(&quot;To select only those rows which contain DIsh home and Data pack Failure&quot;);&#xD;&#xA;&#x9;out_DDUnmatchedFailure = out_dtDDUnmatched.AsEnumerable()&#xD;&#xA;    .Where(x =&gt; x.Field&lt;string&gt;(&quot;STATUS&quot;) == &quot;Failure&quot;).DefaultIfEmpty().CopyToDataTable();&#xD;&#xA;&#x9;&#xD;&#xA;&#xD;&#xA;    //Finding MM Cbs unmatched&#xD;&#xA;    Console.WriteLine(&quot;Finding MM Cbs unmatched&quot;);&#xD;&#xA;&#xD;&#xA;    rowsToDelete = from row1 in out_dtMM.AsEnumerable()&#xD;&#xA;                   join row2 in out_dtMakuriUnmatched.AsEnumerable()&#xD;&#xA;                   on row1.Field&lt;string&gt;(&quot;cbs_trace_id&quot;) equals row2.Field&lt;string&gt;(&quot;Uniq2&quot;)&#xD;&#xA;                   select row1;&#xD;&#xA;&#xD;&#xA;    dtFiltered = out_dtMM.Clone();&#xD;&#xA;&#xD;&#xA;    foreach (DataRow row in rowsToDelete)&#xD;&#xA;    {&#xD;&#xA;        dtFiltered.ImportRow(row);&#xD;&#xA;    }&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;//Filtering Success out from all data to get failed transaction in Match&#xD;&#xA;&#x9;DataTable dtMMMSuccess = dtFiltered.AsEnumerable()&#xD;&#xA;    .Where(x =&gt; x.Field&lt;string&gt;(&quot;Topup Status&quot;) != &quot;Success&quot;).CopyToDataTable();&#xD;&#xA;&#xD;&#xA;    rowsToKeep = out_dtMM.AsEnumerable().Except(rowsToDelete);&#xD;&#xA;    dtFiltered = out_dtMM.Clone();&#xD;&#xA;&#xD;&#xA;    foreach (DataRow row in rowsToKeep)&#xD;&#xA;    {&#xD;&#xA;        dtFiltered.ImportRow(row);&#xD;&#xA;    }&#xD;&#xA;    DataTable out_dtMMMakuriUnmatched = dtFiltered;&#xD;&#xA;&#xD;&#xA;    //Seprating Trasaction Failure and success to determin MM EOD&#xD;&#xA;&#xD;&#xA;    Console.WriteLine(&quot;To select only Transaction Successfull&quot;);&#xD;&#xA;    DataTable out_dtMMEOD = out_dtMMMakuriUnmatched.AsEnumerable()&#xD;&#xA;    .Where(x =&gt; x.Field&lt;string&gt;(&quot;Txn Status&quot;) == &quot;Txn Success&quot;).CopyToDataTable();&#xD;&#xA;&#xD;&#xA;    Console.WriteLine(&quot;To select only Transaction Failed&quot;);&#xD;&#xA;    DataTable out_dtMMFailed = out_dtMMMakuriUnmatched.AsEnumerable()&#xD;&#xA;    .Where(x =&gt; x.Field&lt;string&gt;(&quot;Txn Status&quot;) == &quot;Txn Failure&quot;).CopyToDataTable();&#xD;&#xA;&#xD;&#xA;    Console.WriteLine(&quot;Code successfully executed&quot;);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    //Adding all output datatables in a List of Datatables&#xD;&#xA;    tableToWrite = new List&lt;DataTable&gt;();&#xD;&#xA;    //tableToWrite.AddRange(new DataTable {out_dtResult,out_dtIbankUnmatched,out_dtMakuriUnmatched,out_dtMakuriIbankMatched,out_dtMM,out_dtMakuriMMUnmatched,out_dtMMMakuriUnmatched,out_dtMakuriMMM});&#xD;&#xA;    //tableToWrite.Add(out_dtResult);&#xD;&#xA;    tableToWrite.Add(out_dtIbankUnmatched);&#xD;&#xA;    //tableToWrite.Add(out_dtMakuriUnmatched);&#xD;&#xA;    //tableToWrite.Add(out_dtMakuriIbankMatched);&#xD;&#xA;    //tableToWrite.Add(out_dtMM);&#xD;&#xA;    tableToWrite.Add(out_dtMakuriMMUnmatched);&#xD;&#xA;    //tableToWrite.Add(out_dtMMMakuriUnmatched);&#xD;&#xA;    //tableToWrite.Add(out_dtMakuriMMM);&#xD;&#xA;    tableToWrite.Add(out_dtMMEOD);&#xD;&#xA;    tableToWrite.Add(out_dtMMFailed);&#xD;&#xA;    tableToWrite.Add(out_DDUnmatchedSucess);&#xD;&#xA;    tableToWrite.Add(out_DDUnmatchedFailure);&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;tableToWrite.Add(dtMMMSuccess);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    sheetNames = new List&lt;string&gt;();&#xD;&#xA;    //Don't Change Ibank EOD and mm EOd sheet name&#xD;&#xA;    //string[] stringsToAdd = { &quot;cbs&quot;, &quot;Ibank EOD&quot;, &quot;Unmatched Cbs Data from IBank&quot;, &quot;Ibank and Cbs Match&quot;, &quot;MM Data&quot;, &quot;Dish and Data&quot;, &quot;MM and cbs Unmatched&quot;, &quot;MM and Cbs Matched&quot;, &quot;MM_Eod&quot;, &quot;MM_Failed&quot; };&#xD;&#xA;    string[] stringsToAdd = { &quot;Ibank EOD&quot;, &quot;Dish and Data&quot;, &quot;MM_Eod&quot;, &quot;MM_Failed&quot;, &quot;Dish&amp;Data_EOD&quot;, &quot;Dish&amp;Data Failed&quot;, &quot;MM Failed Matched&quot; };&#xD;&#xA;    sheetNames.AddRange(stringsToAdd);" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="436.6666666666667,165.33333333333334" sap2010:WorkflowViewState.IdRef="InvokeCode_4" Language="CSharp">
        <ui:InvokeCode.Arguments>
          <InArgument x:TypeArguments="sd:DataTable" x:Key="in_dtIbank">[dtIbank]</InArgument>
          <InArgument x:TypeArguments="sd:DataTable" x:Key="in_dtMakuri">[dtMakuri]</InArgument>
          <InArgument x:TypeArguments="sd:DataTable" x:Key="in_dtMM">[dtMM]</InArgument>
          <OutArgument x:TypeArguments="scg:List(sd:DataTable)" x:Key="tableToWrite">[ListTables]</OutArgument>
          <OutArgument x:TypeArguments="scg:List(x:String)" x:Key="sheetNames">[ListSheetsNames]</OutArgument>
          <InArgument x:TypeArguments="sd:DataTable" x:Key="in_dtIBankEOD">[dtIbankEod]</InArgument>
          <InArgument x:TypeArguments="sd:DataTable" x:Key="in_dtMMEOD">[dtMMEod]</InArgument>
          <InArgument x:TypeArguments="sd:DataTable" x:Key="in_dtDD">[dtDD]</InArgument>
        </ui:InvokeCode.Arguments>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:InvokeCode>
      <ui:ForEach x:TypeArguments="sd:DataTable" CurrentIndex="{x:Null}" DisplayName="For Each" sap:VirtualizedContainerService.HintSize="436.6666666666667,468.6666666666667" sap2010:WorkflowViewState.IdRef="ForEach`1_6" Values="[ListTables]">
        <ui:ForEach.Body>
          <ActivityAction x:TypeArguments="sd:DataTable">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="sd:DataTable" Name="currentItem" />
            </ActivityAction.Argument>
            <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="400,339.3333333333333" sap2010:WorkflowViewState.IdRef="Sequence_11">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ui:WriteRange StartingCell="{x:Null}" AddHeaders="True" DataTable="[currentItem]" DisplayName="Write Range Workbook" sap:VirtualizedContainerService.HintSize="358,116" sap2010:WorkflowViewState.IdRef="WriteRange_10" SheetName="[ListSheetsNames(ListTables.IndexOf(currentItem))]" WorkbookPath="[&quot;D:\UiPath\Test File\Data\&quot; + TodayExcelPath +&quot;.xlsx&quot;]" />
              <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="358,96" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Info" Message="[&quot;Successfully written &quot; +ListSheetsNames(ListTables.IndexOf(currentItem))]" />
            </Sequence>
          </ActivityAction>
        </ui:ForEach.Body>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:ForEach>
    </Sequence>
  </Sequence>
</Activity>